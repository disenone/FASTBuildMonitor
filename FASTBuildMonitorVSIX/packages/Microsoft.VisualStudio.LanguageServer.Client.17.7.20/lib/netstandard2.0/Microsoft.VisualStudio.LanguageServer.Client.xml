<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.LanguageServer.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ClientNameAttribute">
            <summary>
            Attribute used to provide additional metadata describing when a language client should be loaded.
            </summary>
            <remarks>
            When defined, language clients will only activate and/or handle individual features if an ILanguageClient's ClientName metadata
            matches wath's stored in a text buffer's properties.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ClientNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ClientNameAttribute" /> class.
            </summary>
            <param name="clientName">Name of the language client.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ClientNameAttribute.ClientName">
            <summary>
            Gets the value which indicates the client name metadata.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition">
            <summary>
            Class which represents the remote and code-remote ContentTypes, which should be used as a base definition for all files that use remote language server.
            Use <see cref="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteBaseTypeName" /> if language content type derives from "code" and <see cref="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.RemoteBaseTypeName" /> if language content type derives from "text".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.RemoteBaseTypeName">
            <summary>
            Base remote ContentType name. Lights up language server features without activating TextMate.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteBaseTypeName">
            <summary>
            Base code remote ContentType name. Lights up language server features without activating TextMate.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteContentTypeName">
            <summary>
            Code remote ContentType name. Lights up all TextMate features (colorization, brace completion, folding ranges).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateColorizationTypeName">
            <summary>
            Code remote colorization ContentType name. Activates TextMate colorization.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateStructureTypeName">
            <summary>
            Code remote structure ContentType name. Activates TextMate folding ranges.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateBraceCompletionTypeName">
            <summary>
            Code remote brace completion ContentType name. Activates TextMate brace completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateIndentationTypeName">
            <summary>
            Code remote smart indentation ContentType name. Activates TextMate smart indentation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.TextMateOnTypeIndentationContentTypeName">
            <summary>
            On type indentation ContentType name. Activates TextMate on type indentation.
            </summary>
            <remarks>
            TODO : When we're able to add Editor NuGet package to this project, we can replace this constant
            by Microsoft.VisualStudio.Editor.CommonEditorConstants.TextMateOnTypeIndentationContentTypeName.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.RemoteBaseContentTypeDefinition">
            <summary>
            Exports the remote base content type so extensions can inherit from it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteBaseContentTypeDefinition">
            <summary>
            Exports the code remote base content type so extensions can inherit from it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteContentTypeDefinition">
            <summary>
            Exports the code-remote content type definition so extensions can inherit from it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateColorizationContentTypeDefinition">
            <summary>
            Exports the code remote colorization content type so extensions can inherit from it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateStructureContentTypeDefinition">
            <summary>
            Exports the code remote structure content type so extensions can inherit from it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateBraceCompletionContentTypeDefinition">
            <summary>
            Exports the code remote brace completion content type so extensions can inherit from it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteTextMateIndentationTypeDefinition">
            <summary>
            Exports the code remote smart indentation service content type so extensions can inherit from it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.TextMateOnTypeIndentationContentTypeDefinition">
            <summary>
            Exports the code remote indentation on typing content type so extensions can inherit from it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.Connection">
            <summary>
            Class which represents the connection to a language server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.Connection.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.Connection" /> class.
            </summary>
            <param name="reader">Reader stream.</param>
            <param name="writer">Writer stream.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Connection.Reader">
            <summary>
            Gets the reader stream.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Connection.Writer">
            <summary>
            Gets the writer stream.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.Connection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.Connection.Dispose(System.Boolean)">
            <summary>
            Dispose pattern.
            </summary>
            <param name="isDisposing"><code>true</code> if called from <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.Connection.Dispose" />.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.DisableUserExperienceAttribute">
            <summary>
            Export attribute which can be used to signify that a language client can disable user experience and editor interactions.
            Such a client will not be loaded by default, and will only be exposed via a LiveShare exposed interface.
            </summary>
            <remarks>
            When the client UX is disabled, the consumer of this attribute is responsible for manually activating the client and
            corresponding server via <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientBroker.LoadAsync(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata,Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient)" />.
            This attribute is currently used to support LiveShare scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.DisableUserExperienceAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.DisableUserExperienceAttribute" /> class.
            </summary>
            <param name="disableUserExperience">Value which indicates if a given language client should disable loading.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.DisableUserExperienceAttribute.DisableUserExperience">
            <summary>
            Gets a value indicating whether a language client is disabling User Experience.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.IAddressableLanguageClient">
            <summary>
            Interface representing a language client that is addressable for callback calls sent specifically to them.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.IAddressableLanguageClient.UniqueName">
            <summary>
            Gets the string to uniquely identify this language client for callbacks.
            </summary>
            <remarks>
            This property must be implemented and cannot return null or throw exceptions.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient">
            <summary>
            Interface representing a language client which connects to a language sever protocol based language server.
            </summary>
            <remarks>
            A normal sequence of activation for the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient" /> follows this pattern:
            <list type="number">
            <item><description>Visual Studio calls <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnLoadedAsync" />,</description></item>
            <item><description>The extension calls and awaits <see cref="M:Microsoft.VisualStudio.Threading.TplExtensions.InvokeAsync``1(Microsoft.VisualStudio.Threading.AsyncEventHandler{``0},System.Object,``0)" />
            on the <see cref="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync" /> event before returning from <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnLoadedAsync" />,</description></item>
            <item><description>Visual Studio calls and awaits <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ActivateAsync(System.Threading.CancellationToken)" /> before returning from <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnLoadedAsync" />,</description></item>
            <item><description>The extension starts the LSP server and returns a <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.Connection" /> to Visual Studio,</description></item>
            <item><description>Visual Studio starts asynchronously initializing the server using the "initialize" and "initialized" LSP messages,</description></item>
            <item><description>Visual Studio completes the <see cref="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync" /> event handling,</description></item>
            <item><description>The extension completes the <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnLoadedAsync" /> execution,</description></item>
            <item><description>Visual Studio calls the <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnServerInitializedAsync" /> method after the "initialize" and "initialized" LSP messages are exchanged (or the
            <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnServerInitializeFailedAsync(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientInitializationInfo)" /> method in case of failure).</description></item>
            </list>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync">
            <summary>
            Async event to indicate to Visual Studio that server should be started by calling <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ActivateAsync(System.Threading.CancellationToken)" />.
            If the server is already started, this event will be ignored.
            </summary>
            <remarks>
            This event must be invoked in order to start the language server.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StopAsync">
            <summary>
            Async event to indicate to Visual Studio that the server should be stopped by sending an LSP "shutdown" request.
            If the server is not started, this event will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.Name">
            <summary>
            Gets the name of the language client (displayed to the user).
            </summary>
            <remarks>
            This property must be implemented and cannot return null or throw exceptions.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ConfigurationSections">
            <summary>
            Gets the configuration section names for the language client. This may be null if the language client
            does not provide settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.InitializationOptions">
            <summary>
            Gets the initialization options object the client wants to send when 'initialize' message is sent.
            This may be null if the client does not need custom initialization options.
            </summary>
            <remarks>
            The object defined here must be JSON serializable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.FilesToWatch">
            <summary>
            Gets the list of file names to watch for changes.  Changes will be sent to the server via 'workspace/didChangeWatchedFiles'
            message.  The files to watch must be under the current active workspace.  The file names can be specified as a relative
            paths to the exact file, or as glob patterns following the standard in .gitignore see https://www.kernel.org/pub/software/scm/git/docs/gitignore.html files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ShowNotificationOnInitializeFailed">
            <summary>
            Gets a value indicating whether a notification bubble show be shown when the language server fails to initialize.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnLoadedAsync">
            <summary>
            This method is called by Visual Studio to notify the extension that the language client has been loaded.
            The extension can start the LSP server immediately, or wait for user action to start.
            To start the server call and await <see cref="M:Microsoft.VisualStudio.Threading.TplExtensions.InvokeAsync``1(Microsoft.VisualStudio.Threading.AsyncEventHandler{``0},System.Object,``0)" /> on
            the <see cref="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync" /> event before returning from this method.
            </summary>
            <returns>A Task which completes when actions that need to be performed when extension is loaded are done.</returns>
            <remarks>If a language client doesn't await the <see cref="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync" /> call before returning from <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnLoadedAsync" />, it may not receive messages
            and notifications related to user interactions initiated before the completion of the <see cref="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync" /> call.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnServerInitializedAsync">
            <summary>
            This method is called by Visual Studio to notify the extension that the LSP server has been initialized: LSP "initialize" and "initialized" messages have been exchanged.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which completes when actions that need to be performed when the server is ready are done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ActivateAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called by Visual Studio to notify the extension that the LSP server should be started.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.Connection" /> object; or null if the language server cannot be started.</returns>
            <remarks>
            <para>Any exceptions thrown here will be caught and displayed to users.</para>
            <para>This method is normally called by Visual Studio while handling the <see cref="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync" /> event, before returning from such event.
            Visual Studio can call <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ActivateAsync(System.Threading.CancellationToken)" /> again, in case the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.Connection" /> with the server is closed, in order to activate the
            server again.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnServerInitializeFailedAsync(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientInitializationInfo)">
            <summary>
            This method is called by Visual Studio to notify the extension that the initialization of the LSP server has failed.
            </summary>
            <param name="initializationState">Object containing information about the point reached during initialization to help identify the source and whether this is a recoverable error.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which completes when actions that need to be performed when the server fails to initialize are done
            and returns a <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.InitializationFailureContext" /> instance with the context of the failure for the specific language client.
            Can be null if the client wants to show the error in a different way.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientBroker">
            <summary>
            Contract used to broker ILanguageClient instances with the platform.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientBroker.LoadAsync(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata,Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient)">
            <summary>
            Loads a language client.
            </summary>
            <param name="metadata">Content type of the language client.</param>
            <param name="client">The language client.</param>
            <returns>A task that completes when loading completes.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2">
            <summary>
            Interface that provides custom message contract using StreamJsonRpc v2.
            </summary>
            <remarks>
            All of the methods defined in this interface must be implemented and should not default to throw <see cref="T:System.NotImplementedException" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2.MiddleLayer">
            <summary>
            Gets the middle layer object that can intercept outgoing requests and responses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2.CustomMessageTarget">
            <summary>
            Gets the target object for receiving custom messages not covered by the language server protocol.
            </summary>
            <remarks>
            If left null, then custom messages won't be delivered.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2.AttachForCustomMessageAsync(StreamJsonRpc.JsonRpc)">
            <summary>
            This method is called after the language server has been activated, but connection has not been established.
            </summary>
            <param name="rpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> object used to send custom messages to the language server.</param>
            <returns>A task that completes when the language client is ready to send custom messages to the language server.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientDocumentManager">
            <summary>
            Interface representing a client which provides document management functionality in IDE such as opening documents
            and ensuring documents exist on disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientDocumentManager.EnsureFileExistsAsync(System.Uri)">
            <summary>
            Asks the language client to create a local copy of a document and return the local file path.
            </summary>
            <param name="documentUri">Document URI that was returned by language client in response to an LSP query.</param>
            <returns>Local path to the file on disk or null if URI couldn't be recognized or converted to a local path.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientInitializationInfo">
            <summary>
            Interface representing various information useful about the status of the initialization of the language client.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientInitializationInfo.Status">
            <summary>
            Gets an Enum representing the status reached during initialization.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientInitializationInfo.InitializationException">
            <summary>
            Gets the exception that was thrown during initialization. May be null if no exception was thrown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientInitializationInfo.IsInitialized">
            <summary>
            Gets a value indicating whether the clien was correctly initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientInitializationInfo.StatusMessage">
            <summary>
            Gets a human-readable string telling the status of the initialization.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata">
            <summary>
            Metadata describing an ILanguageClient.
            </summary>
            <remarks>
            This is used when one choosed to load an ILanguageClient without going through MEF.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata.ClientName">
            <summary>
            Gets the value which indicates client name.
            </summary>
            <remarks>
            Used to indicate a particular client should be activated when the specified name matches the <see cref="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMetadata.ClientName" />
            specified in the <see cref="F:Microsoft.VisualStudio.LanguageServer.Client.LanguageClientConstants.ClientNamePropertyKey" /> buffer property.
            Multiple language clients can share this same name.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMiddleLayer">
            <summary>
            Interface representing a client which can intercept language server messages and implement custom behaviour around them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMiddleLayer.CanHandle(System.String)">
            <summary>
            This method is called to determine if this middle layer is capable of intercepting the given method.
            </summary>
            <param name="methodName">The name of the method to be intercepted.</param>
            <returns>True if the given method can be intercepted, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMiddleLayer.HandleRequestAsync(System.String,Newtonsoft.Json.Linq.JToken,System.Func{Newtonsoft.Json.Linq.JToken,System.Threading.Tasks.Task{Newtonsoft.Json.Linq.JToken}})">
            <summary>
            Intercepts JSON-RPC request calls for <paramref name="methodName" />.
            </summary>
            <param name="methodName">The name of the method that is being intercepted.</param>
            <param name="methodParam">Parameter to be sent for the request.</param>
            <param name="sendRequest">
            Function delegate which will send the request to the server. This delegate can be ignored and not invoked
            if the choice is to not send the request to the server.  It must be invoked in this method if the choice is
            to send the request to the server.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> corresponding to a valid response for the given method.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientMiddleLayer.HandleNotificationAsync(System.String,Newtonsoft.Json.Linq.JToken,System.Func{Newtonsoft.Json.Linq.JToken,System.Threading.Tasks.Task})">
            <summary>
            Intercepts JSON-RPC notification calls for <paramref name="methodName" />.
            </summary>
            <param name="methodName">The name of the method that is being intercepted.</param>
            <param name="methodParam">Parameter to be sent for the notification.</param>
            <param name="sendNotification">
            Function delegate which will send the notification to the server. This delegate can be ignored and not invoked
            if the choice is to not send the notification to the server.  It must be invoked in this method if the choice is
            to send the notification to the server.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes once the notification has been sent.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.InitializationFailureContext">
            <summary>
            Class to encapsulate any properties related to the context of initialization failures.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.InitializationFailureContext.FailureMessage">
            <summary>
            Gets or sets the message with the details of the failure to show to the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus">
            <summary>
            Enum which represents the various point of the initialization process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.InitializationNotStarted">
            <summary>
            Initialization has not started yet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.InitializationStarted">
            <summary>
            Initialization has started.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.ActivatingLanguageClient">
            <summary>
            Executing <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ActivateAsync(System.Threading.CancellationToken)" /> method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.CreatingJsonRpcObject">
            <summary>
            Creating <see cref="T:StreamJsonRpc.JsonRpc" /> object with the provided connection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.ConfiguringRemoteCustomMessageTarget">
            <summary>
            Adding <see cref="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2.CustomMessageTarget" /> to the <see cref="T:StreamJsonRpc.JsonRpc" /> object.
            This is only done if the language client implements <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.ConfiguringTracing">
            <summary>
            Configuring the client specific tracing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.StartingJsonRpcConnection">
            <summary>
            <see cref="M:StreamJsonRpc.JsonRpc.StartListening" /> is called for the connection object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.AttachingRpcObjectForCustomMessaging">
            <summary>
            Calling <see cref="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage2.AttachForCustomMessageAsync(StreamJsonRpc.JsonRpc)" /> to provide the language client
            with the <see cref="T:StreamJsonRpc.JsonRpc" /> object to be used for custom messaging.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.SendingInitializeRequest">
            <summary>
            Sending the LSP 'initialize' request to the language server.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.SendingInitializedNotification">
            <summary>
            Sending the LSP 'initialized' notification to the language server.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.SubscribingToDisconnectionEvents">
            <summary>
            Subscribing to the <see cref="E:StreamJsonRpc.JsonRpc.Disconnected" /> event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.InitializationStatus.InitializationComplete">
            <summary>
            Initialization completed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.LanguageClientConstants">
            <summary>
            Constants value for ILanguageClient related APIs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.LanguageClientConstants.ClientNamePropertyKey">
            <summary>
            Property key value for client name properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.RunningContext">
            <summary>
            Enum which represents the UI Context in which the language client should be booted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.RunningContext.RunOnGuest">
            <summary>
            Boot if running as guest.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.RunningContext.RunOnHost">
            <summary>
            Boot if running as Host.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.RunOnContextAttribute">
            <summary>
            Export attribute which can be used to signify that a language client will only be activated in certain LiveShare context.
            </summary>
            <remarks>
            When the client is only made to run on Host and not activated on the Guest side this attibute is set to RunOnHost to avoid mirroing the results over LiveShare.
            This attribute is currently used to support LiveShare scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.RunOnContextAttribute.#ctor(Microsoft.VisualStudio.LanguageServer.Client.RunningContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.RunOnContextAttribute" /> class.
            </summary>
            <param name="runOnContext">Value which indicates the context in which the language client can be activated.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.RunOnContextAttribute.RunOnContext">
            <summary>
            Gets a value indicating the context in which the client can be activated.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>hrQ8dteZmx6R345wmFg8l0Q27SOxc3VGjHkydwE6oZg=</DigestValue></Reference></SignedInfo><SignatureValue>V7s84nGIE2FtDyfCKkC5vFcquY2y3weMNEDuxQyvXEY8ykYeaVN59Y2hjqnNg95MTZ21vcySyLxuq6+9+b6denjtiTKHiGlngUf9FC32GgYPDH3SYvHy2NCA3PNn/SoSRF83up+ik9ZxfdbGVlGJH07mgDkT0TUudzYKQIIZPTCFim4t2YwOseAxrJwYflrFh3xSQG2L0leGJHEVwPbDTY1BGf9FK4QKngZly7n8rKvW58A1/Gy8N8zJYkfka+GcG+Q53ZVZp/Jwbu1lI8q5Km+kbiCN2w8+p059WCPHCOJyRY7P3FHVjrMre6XnGZMTrDhZ9mDIWJTofiEFi1++lg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>1Cj3ChlWunG6BkFNNzjW1CspeFqR+kNl6PXD90YV0zmugukx5bXdkX545VEBvjMKMvd4hphihDBf48jtl3YsDD+Nu4/dAvzzGP3eb2N9bMfrnbW4n+xgie4ydby83Y9vM1eK9BRhushL/rVDXpUyLBZpkm9BVIibVOK+bHwk4b4PHSPxfR4esTGaFbYvpG1ZWvoZRvG3+LNNFU8OLgGYYxkxQmBUcrSid/5rXoNqp8LxwzoFe0EnVeXVnXdPsc3LhtKoHd6AggIx/GZo5qMJB1HuHVJm3GX17IFpTn3OgxuyUvg3iWpNQ72m2pmKh4NQFHmdPrJKZMKysF0xcAUZbQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
